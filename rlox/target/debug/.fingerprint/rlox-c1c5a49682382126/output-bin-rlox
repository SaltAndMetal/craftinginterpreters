{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"src/token.rs","byte_start":883,"byte_end":1411,"line_start":63,"line_end":80,"column_start":66,"column_end":3,"is_primary":true,"text":[{"text":"pub const RESERVED: std::collections::HashMap<&str, TokenType> = std::collections::HashMap::from([","highlight_start":66,"highlight_end":99},{"text":"    (\"and\", TokenType::AND),","highlight_start":1,"highlight_end":29},{"text":"    (\"class\", TokenType::CLASS),","highlight_start":1,"highlight_end":33},{"text":"    (\"else\", TokenType::ELSE),","highlight_start":1,"highlight_end":31},{"text":"    (\"false\", TokenType::FALSE),","highlight_start":1,"highlight_end":33},{"text":"    (\"for\", TokenType::FOR),","highlight_start":1,"highlight_end":29},{"text":"    (\"fun\", TokenType::FUN),","highlight_start":1,"highlight_end":29},{"text":"    (\"if\", TokenType::IF),","highlight_start":1,"highlight_end":27},{"text":"    (\"nil\", TokenType::NIL),","highlight_start":1,"highlight_end":29},{"text":"    (\"or\", TokenType::OR),","highlight_start":1,"highlight_end":27},{"text":"    (\"print\", TokenType::PRINT),","highlight_start":1,"highlight_end":33},{"text":"    (\"return\", TokenType::RETURN),","highlight_start":1,"highlight_end":35},{"text":"    (\"super\", TokenType::SUPER),","highlight_start":1,"highlight_end":33},{"text":"    (\"this\", TokenType::THIS),","highlight_start":1,"highlight_end":31},{"text":"    (\"true\", TokenType::TRUE),","highlight_start":1,"highlight_end":31},{"text":"    (\"var\", TokenType::VAR),","highlight_start":1,"highlight_end":29},{"text":"    (\"while\", TokenType::WHILE),","highlight_start":1,"highlight_end":33},{"text":"]);","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/token.rs:63:66\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub const RESERVED: std::collections::HashMap<&str, TokenType> = std::collections::HashMap::from([\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m__________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (\"and\", TokenType::AND),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (\"class\", TokenType::CLASS),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (\"else\", TokenType::ELSE),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (\"while\", TokenType::WHILE),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\n\n"}
{"message":"cannot assign to `line` because it is borrowed","code":{"code":"E0506","explanation":"An attempt was made to assign to a borrowed value.\n\nErroneous code example:\n\n```compile_fail,E0506\nstruct FancyNum {\n    num: u8,\n}\n\nlet mut fancy_num = FancyNum { num: 5 };\nlet fancy_ref = &fancy_num;\nfancy_num = FancyNum { num: 6 };\n// error: cannot assign to `fancy_num` because it is borrowed\n\nprintln!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n```\n\nBecause `fancy_ref` still holds a reference to `fancy_num`, `fancy_num` can't\nbe assigned to a new value as it would invalidate the reference.\n\nAlternatively, we can move out of `fancy_num` into a second `fancy_num`:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nlet mut fancy_num = FancyNum { num: 5 };\nlet moved_num = fancy_num;\nfancy_num = FancyNum { num: 6 };\n\nprintln!(\"Num: {}, Moved num: {}\", fancy_num.num, moved_num.num);\n```\n\nIf the value has to be borrowed, try limiting the lifetime of the borrow using\na scoped block:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nlet mut fancy_num = FancyNum { num: 5 };\n\n{\n    let fancy_ref = &fancy_num;\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n\n// Works because `fancy_ref` is no longer in scope\nfancy_num = FancyNum { num: 6 };\nprintln!(\"Num: {}\", fancy_num.num);\n```\n\nOr by moving the reference into a function:\n\n```\nstruct FancyNum {\n    num: u8,\n}\n\nfn print_fancy_ref(fancy_ref: &FancyNum){\n    println!(\"Ref: {}\", fancy_ref.num);\n}\n\nlet mut fancy_num = FancyNum { num: 5 };\n\nprint_fancy_ref(&fancy_num);\n\n// Works because function borrow has ended\nfancy_num = FancyNum { num: 6 };\nprintln!(\"Num: {}\", fancy_num.num);\n```\n"},"level":"error","spans":[{"file_name":"src/scan.rs","byte_start":330,"byte_end":341,"line_start":11,"line_end":11,"column_start":28,"column_end":39,"is_primary":false,"text":[{"text":"        let mut addToken = |tokenType| {tokens.push(Token::new(tokenType, line))};","highlight_start":28,"highlight_end":39}],"label":"borrow of `line` occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/scan.rs","byte_start":2872,"byte_end":2881,"line_start":85,"line_end":85,"column_start":41,"column_end":50,"is_primary":true,"text":[{"text":"                                '\\n' => line += 1,","highlight_start":41,"highlight_end":50}],"label":"assignment to borrowed `line` occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/scan.rs","byte_start":377,"byte_end":381,"line_start":11,"line_end":11,"column_start":75,"column_end":79,"is_primary":false,"text":[{"text":"        let mut addToken = |tokenType| {tokens.push(Token::new(tokenType, line))};","highlight_start":75,"highlight_end":79}],"label":"borrow occurs due to use in closure","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/scan.rs","byte_start":3505,"byte_end":3513,"line_start":102,"line_end":102,"column_start":17,"column_end":25,"is_primary":false,"text":[{"text":"                addToken(TokenType::STRING(string));","highlight_start":17,"highlight_end":25}],"label":"borrow later used here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0506]\u001b[0m\u001b[0m\u001b[1m: cannot assign to `line` because it is borrowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/scan.rs:85:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut addToken = |tokenType| {tokens.push(Token::new(tokenType, line))};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mborrow of `line` occurs here\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mborrow occurs due to use in closure\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                '\\n' => line += 1,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9massignment to borrowed `line` occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                addToken(TokenType::STRING(string));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mborrow later used here\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0015, E0506.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0015, E0506.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0015`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0015`.\u001b[0m\n"}
